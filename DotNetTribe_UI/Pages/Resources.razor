@page "/resources"
@inject HttpClient Http
@inject IConfiguration _config
@using System.Text.Json
@using System.Text.Json.Serialization
@using Newtonsoft.Json

@using DotNetTribe_UI.Components
@using DotNetTribe_UI_Shared.Models.ConfigModels
@using DotNetTribe_UI_Shared.Models.UtilModels

<PageTitle>Resources</PageTitle>


<div class="bg-primary-bg pb-36">
    <div class="bg-secondary h-[50vh] md:h-[40vh] flex justify-center w-full">
        <div class="flex flex-col justify-center items-center w-full md:max-w-[90vw]  lg:max-w-[70vw]">
            <h1 class="font-grotesk font-extrabold text-5xl md:text-6xl lg:text-7xl text-white drop-shadow-2xl">Resources</h1>
            <div class="flex flex-row flex-wrap md:flex-nowrap justify-center gap-6 w-full">
                <div class=" inline-flex overflow-hidden p-4 bg-transparent border-b-2 border-white w-1/3 md:w-auto">
                    <input type="text" class=" font-sourceSans bg-transparent max-sm:w-full focus:outline-none text-white"
                        placeholder="Search All Resources" @bind-value=@searchParam />
                    <span class="icon-[cil--search] p-4 size-6 bg-white cursor-pointer" style="" @onclick="() => SearchWithParams(searchParam)"></span>
                </div> 
                <div class=" inline-flex overflow-hidden p-4 bg-transparent border-b-2 border-white w-1/3 md:w-auto">
                    <input type="text"
                        class=" font-sourceSans bg-transparent max-sm:w-full focus:outline-none text-white"
                        placeholder="Resource Type" @bind-value="resourceType" />
                    <span class="icon-[teenyicons--down-outline] p-2 size-6 bg-white cursor-pointer"
                        @onclick="ToggleRTDropdown"></span>
                    <div
                        class=" @dropdownResourceTypeClass flex flex-col absolute mt-10 p-2 md:p-4 gap-2 bg-white border-2 border-accent rounded-xl">
                        @foreach (var value in Enum.GetValues(typeof(ResourceType)))
                        {
                            <button @onclick="() => SelectResourceType(value.ToString()!)"
                                class="rounded-xl p-2 hover:bg-primary hover:text-white">
                                @value
                            </button>
                        }
                    </div>
                </div> 
                <div class=" inline-flex overflow-hidden p-4 bg-transparent border-b-2 border-white w-1/3 md:w-auto">
                    <input type="text"
                        class=" font-sourceSans bg-transparent max-sm:w-full focus:outline-none text-white"
                        placeholder="Resource Level"  />
                    <span class="icon-[teenyicons--down-outline] p-2 size-6 bg-white cursor-pointer"
                        @onclick="ToggleRDDropdown"></span>
                    <div
                        class=" @dropdownResourceDifficultyClass flex flex-col absolute mt-10 p-2 md:p-4 gap-2 bg-white border-2 border-accent rounded-xl">
                        @foreach (var value in Enum.GetValues(typeof(DifficultyLevel)))
                        {
                            <button @onclick="() => SelectResourceDifficulty(value.ToString()!)"
                                class="rounded-xl p-2 hover:bg-primary hover:text-white">
                                @value
                            </button>
                        }
                    </div>
                </div>         
            </div>
        </div>
    </div>
    <div class="w-full p-6 -mt-16 md:-mt-24 flex flex-col justify-center items-center">
        <div class="grid md:grid-cols-3 gap-6 lg:gap-8 pb-20">
            @foreach(var resource in resources){
                <div class="bg-white h-auto min-w-[20rem] md:min-w-[15rem] lg:min-w-[20rem] rounded-2xl shadow-lg">
                    <img src="@resource.ImageUrl" alt="Resource Image"
                        class="w-full h-40 object-cover rounded-t-lg" />
                    <div class=" flex flex-col space-y-2 justify-evenly p-4 ">
                        <h3 class="font-sourceSans text-xs text-gray-600">@resource.DifficultyLevel</h3>
                        <h1 class=" body-heading2">@resource.Title</h1>
                        <h2 class=" body-text1">@resource.Description</h2>
                        <a class="text-white" href="@resource.Url" target="_blank">
                            <button class=" btn-primary max-w-28">
                                @if (resource.Type == ResourceType.Link)
                                {
                                    <a class="text-white" target="_blank">Go To</a>
                                }
                                else if (resource.Type == ResourceType.Document)
                                {
                                    <a class="text-white" href="@resource.Url" target="_blank" download="">Download</a>
                                }
                                else if (resource.Type == ResourceType.Video)
                                {
                                    <a class="text-white" href="@resource.Url" target="_blank">Watch</a>
                                }
                                else
                                {
                                    <span class="text-white">Click Here</span>
                                }
                            </button>
                        </a>
                    </div>
                </div>
            }
        </div>
        <Pagination CurrentPage="currentPage" TotalPages="totalPages" OnPageChanged="HandlePageChanged"
            NameOfClass="w-[70vw] md:w-[20vw] justify-between" />

    </div>
</div>

@code {
    private string searchParam = "";
    private string resourceType = "";
    private string resourceDifficulty = "";
    private bool showRTDropdown = false;
    private string dropdownResourceTypeClass => showRTDropdown ? "" : "hidden";
    private void ToggleRTDropdown()
    {
        showRTDropdown = !showRTDropdown;
    }
    private async void SelectResourceType(string resourceTypeParam)
    {
        resourceType = resourceTypeParam;
        await LoadResources(type: resourceType);
    }

    private async void SearchWithParams(string searchParams)
    {
        searchParam = searchParams;
        await LoadResources(searchParam: searchParam);
    }
    private bool showRDDropdown = false;
    private string dropdownResourceDifficultyClass => showRDDropdown ? "" : "hidden";
    private void ToggleRDDropdown()
    {
        showRDDropdown = !showRDDropdown;
    }
    private async void SelectResourceDifficulty(string resourceDifficultyParam)
    {
        resourceDifficulty = resourceDifficultyParam;
        await LoadResources(difficultyLevel: resourceDifficulty);
    }

    private int currentPage = 1;
    private int? totalPages;
    public IEnumerable<ResourceDto> resources = Enumerable.Empty<ResourceDto>();
    protected override async Task OnInitializedAsync()
    {
        await LoadResources(1, searchParam);
    }
    private async Task LoadResources(int page = 1, string searchParam = "", string type = "", string difficultyLevel = "")
    {
        string? baseUrl = _config.GetValue<string>("ProjectBaseSettings:BaseUrl");
        string? GetAllBlogsEndpoint = _config.GetValue<string>("ProjectBaseSettings:GetAllResourcesEndpoint");

        string fullUrl = $"{baseUrl}{GetAllBlogsEndpoint}?type={type}&KeyWords={searchParam}&difficultyLevel={difficultyLevel}&PageNumber={page}&PageSize=30";

        var request = new HttpRequestMessage(HttpMethod.Get, fullUrl);
        request.Headers.Add("Accept", "application/json");

        var res = await Http.SendAsync(request);

        if (res.IsSuccessStatusCode)
        {
            var response = await res.Content.ReadAsStringAsync();
            var resourceData = JsonConvert.DeserializeObject<ApiResponseModel<PaginationResult<ResourceDto>>>(response);
            // Assuming each page returns a fixed number of jobs, e.g., 10
            int pageSize = resourceData!.data!.pageSize;
            // Calculate the start index for this page
            int startIndex = (page - 1) * pageSize;

            // Filter jobs for this page
            var paginatedResources = resourceData?.data?.records.Skip(startIndex).Take(pageSize).ToList();

            // Update the resources variable with the filtered list
            resources = paginatedResources!;
            totalPages = resourceData?.data?.totalPages;
        }
    }

    private async Task HandlePageChanged(int page)
    {
        currentPage = page;
        await LoadResources(currentPage);
    }
}
