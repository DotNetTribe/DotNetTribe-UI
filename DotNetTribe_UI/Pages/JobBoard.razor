@page "/job-board"

@inject HttpClient Http
@inject IConfiguration _config
@using System.Text.Json
@using System.Text.Json.Serialization

@using System.Net.Http.Headers
@using Microsoft.Extensions.Configuration
@using DotNetTribe_UI.Components
@using DotNetTribe_UI_Shared.Models.JobPostingModels
@using DotNetTribe_UI_Shared.Models.ConfigModels
@using DotNetTribe_UI_Shared.Models.UtilModels
@using Newtonsoft.Json




<PageTitle>Job Board</PageTitle>

<div class=" bg-primary-bg">
    <div
        class="h-[70vh] md:p-24 lg:p-72 bg-[url('/assets/job-landingpage.png')] bg-cover bg-bottom flex flex-row justify-center items-center">
        <div class="h-auto px-2 space-y-7">
            <h1 class="body-heading1 text-center md:text-4xl lg:text-6xl leading-tight text-white drop-shadow-2xl">
                Discover .NET Roles in Africa & all over the Globe üåç</h1>
            <div class="text-center flex flex-col justify-center space-y-5">
                <div
                    class=" h-auto w-[90vw] md:w-[80vw] lg:w-[40vw] self-center bg-secondary-bg p-5 border-4 border-primary rounded-xl flex flex-row justify-between items-center space-x-2 md:space-x-0 overflow-hidden">
                    <span class="icon-[cil--search] p-2 md:p-3" style=""></span>
                    <input type="text" @bind-value="jobSearchParam.query"
                        class=" bg-transparent focus:outline-none w-16 md:w-auto" placeholder="C# Developer">
                    <span class="icon-[fluent--divider-tall-16-filled] p-3 md:p-5 bg-gray-400" style=""></span>
                    <span class="icon-[carbon--location] p-2 md:p-3" style=""></span>
                    <input type="text" class=" bg-transparent focus:outline-none w-16 md:w-auto" placeholder="Remote"
                        @bind-value="jobSearchParam.country">
                    <button class="btn-primary"
                        @onclick="() => LoadJobs(1, selectedDatePosted, selectedExperienceLevel, selectedJobType)">Search</button>
                </div>
                <div class="flex flex-row flex-wrap justify-center items-cente gap-6 ">
                    <div class="p-2 md:p-4 mb-2 bg-white border-2 border-accent rounded-xl flex items-center cursor-pointer"
                        @onclick="ToggleDPDropdown">
                        Date Posted <span class="icon-[mingcute--down-fill] p-2"></span>
                        <div
                            class=" @dropdownDatePostedClass flex flex-col absolute mt-20 p-2 md:p-4 gap-2 bg-white border-2 border-accent rounded-xl">
                            @foreach (var value in Enum.GetValues(typeof(date_posted)))
                            {
                                <button @onclick="() => SelectDatePosted(value.ToString()!)"
                                    class="rounded-xl p-2 hover:bg-primary hover:text-white">
                                    @value
                                </button>
                            }
                        </div>
                    </div>
                    
                    <div class="p-2 md:p-4 mb-2 bg-white border-2 border-accent rounded-xl flex items-center cursor-pointer"
                        @onclick="ToggleELDropdown">
                        Experience Level <span class="icon-[mingcute--down-fill] p-2"></span>
                        <div
                            class=" @dropdownExperienceLevelClass flex flex-col absolute mt-20 p-2 md:p-4 gap-2 bg-white border-2 border-accent rounded-xl">
                            @foreach (var value in Enum.GetValues(typeof(job_requirements)))
                            {
                                <button @onclick="() => SelectExperienceLevel(value.ToString()!)"
                                    class="rounded-xl p-2 hover:bg-primary hover:text-white">
                                    @value
                                </button>
                            }
                        </div>
                    </div>
                    
                    <div class="p-2 md:p-4 mb-2 bg-white border-2 border-accent rounded-xl flex items-center cursor-pointer"
                        @onclick="ToggleJTDropdown">
                        Job Type <span class="icon-[mingcute--down-fill] p-2"></span>
                        <div
                            class=" @dropdownJobTypeClass flex flex-col absolute mt-20 p-2 md:p-4 gap-2 bg-white border-2 border-accent rounded-xl">
                            @foreach (var value in Enum.GetValues(typeof(employment_types)))
                            {
                                <button @onclick="() => SelectExperienceLevel(value.ToString()!)"
                                    class="rounded-xl p-2 hover:bg-primary hover:text-white">
                                    @value
                                </button>
                            }
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
    <div class="h-[auto] shadow p-3 pb-44 lg:pb-36 lg:pr-[13rem] lg:pl-[13rem] gap-6 overscroll-none overflow-hidden">
        @if (jobs == null)
        {
            <div class=" animate-pulse grid md:grid-cols-12 w-full h-1/2 gap-2">
                <div class="md:col-span-5 lg:col-span-4 space-y-4">
                    <div
                        class=" flex flex-col  border-2 border-dark rounded-md shadow-lg p-4 bg-secondary-bg cursor-pointer">
                        <div class="flex flex-row justify-between">
                            <div class="flex flex-col">
                                <h2 class="font-grotesk font-bold md:text-xl bg-slate-400 rounded-full py-2 mb-2"></h2>
                                <h3
                                    class="font-sourceSans font-medium md:text-lg bg-slate-400 rounded-full py-2 w-1/2 mb-2">
                                </h3>
                                <h4 class="font-sourceSans bg-slate-400 rounded-full py-2 mb-2 w-16"></h4>
                                <div class="flex flex-row space-x-1">
                                    <div
                                        class="text-xs font-bold bg-primary border-2 border-dark rounded-xl p-[.5rem] w-16">
                                    </div>
                                    <div
                                        class="text-xs font-bold bg-primary border-2 border-dark rounded-xl p-[.5rem] w-16">
                                    </div>
                                </div>
                                <p
                                    class="font-sourceSans italic line-clamp-2 mt-4 bg-slate-400 rounded-full py-2 w-[15rem]">
                                </p>
                                <p class="font-sourceSans font-bold mt-4 bg-slate-400 rounded-full py-2 w-1/2"></p>
                            </div>
                            <div>
                                <span class="icon-[ph--dots-three-circle-vertical-fill] bg-primary p-4"></span>
                            </div>
                        </div>
                    </div>
                    <div
                        class=" flex flex-col  border-2 border-dark rounded-md shadow-lg p-4 bg-secondary-bg cursor-pointer">
                        <div class="flex flex-row justify-between">
                            <div class="flex flex-col">
                                <h2 class="font-grotesk font-bold md:text-xl bg-slate-400 rounded-full py-2 mb-2"></h2>
                                <h3
                                    class="font-sourceSans font-medium md:text-lg bg-slate-400 rounded-full py-2 w-1/2 mb-2">
                                </h3>
                                <h4 class="font-sourceSans bg-slate-400 rounded-full py-2 mb-2 w-16"></h4>
                                <div class="flex flex-row space-x-1">
                                    <div
                                        class="text-xs font-bold bg-primary border-2 border-dark rounded-xl p-[.5rem] w-16">
                                    </div>
                                    <div
                                        class="text-xs font-bold bg-primary border-2 border-dark rounded-xl p-[.5rem] w-16">
                                    </div>
                                </div>
                                <p
                                    class="font-sourceSans italic line-clamp-2 mt-4 bg-slate-400 rounded-full py-2 w-[15rem]">
                                </p>
                                <p class="font-sourceSans font-bold mt-4 bg-slate-400 rounded-full py-2 w-1/2"></p>
                            </div>
                            <div>
                                <span class="icon-[ph--dots-three-circle-vertical-fill] bg-primary p-4"></span>
                            </div>
                        </div>
                    </div>
                    <div
                        class=" flex flex-col  border-2 border-dark rounded-md shadow-lg p-4 bg-secondary-bg cursor-pointer">
                        <div class="flex flex-row justify-between">
                            <div class="flex flex-col">
                                <h2 class="font-grotesk font-bold md:text-xl bg-slate-400 rounded-full py-2 mb-2"></h2>
                                <h3
                                    class="font-sourceSans font-medium md:text-lg bg-slate-400 rounded-full py-2 w-1/2 mb-2">
                                </h3>
                                <h4 class="font-sourceSans bg-slate-400 rounded-full py-2 mb-2 w-16"></h4>
                                <div class="flex flex-row space-x-1">
                                    <div
                                        class="text-xs font-bold bg-primary border-2 border-dark rounded-xl p-[.5rem] w-16">
                                    </div>
                                    <div
                                        class="text-xs font-bold bg-primary border-2 border-dark rounded-xl p-[.5rem] w-16">
                                    </div>
                                </div>
                                <p
                                    class="font-sourceSans italic line-clamp-2 mt-4 bg-slate-400 rounded-full py-2 w-[15rem]">
                                </p>
                                <p class="font-sourceSans font-bold mt-4 bg-slate-400 rounded-full py-2 w-1/2"></p>
                            </div>
                            <div>
                                <span class="icon-[ph--dots-three-circle-vertical-fill] bg-primary p-4"></span>
                            </div>
                        </div>
                    </div>

                </div>
                @* <div class="md:col-span-7 lg:col-span-8">
            <div class=" space-y-4 ">
            <div class=" flex flex-col border-2 border-dark rounded-md shadow-lg p-4 bg-secondary-bg">
            <div class="flex flex-row justify-between">
            <div class="flex flex-col">
            <h2 class="font-grotesk font-bold md:text-2xl bg-slate-400 rounded-full py-2 w-56 mb-2">
            </h2>
            <h3
            class="font-sourceSans font-medium md:text-xl bg-slate-400 rounded-full py-2 w-40 mb-2">
            </h3>
            <h4 class="font-sourceSans text-lg bg-slate-400 rounded-full py-2 w-20 mb-2"></h4>
            <p class="font-sourceSans text-xl bg-slate-400 rounded-full py-2 w-24 mb-4"></p>
            <a href="https://google.com" target="_blank"><button
            class="btn-primary w-[6rem] flex justify-center items-center space-x-2 h-10"></button></a>
            </div>
            <div>
            <span
            class="icon-[ph--dots-three-circle-vertical-fill] bg-primary p-4 cursor-pointer"></span>
            </div>
            </div>
            </div>
            <div class="p-4 border-2 border-dark rounded-md shadow-lg bg-secondary-bg">
            <h2
            class="font-grotesk font-bold text-lg md:text-xl lg:text-2xl mb-4 bg-slate-400 rounded-full py-4 w-36">
            </h2>
            <p class="body-text1">
            <div class="grid grid-cols-4 w-full">
            <div class="col-span-1 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-3 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-1 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-3 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-2 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-2 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-1 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-3 bg-slate-400 rounded-full py-2 w-1/2 mb-2"></div>
            <div class="col-span-1 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-3 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-2 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-2 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-1 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-3 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-1 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-3 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-2 bg-slate-400 rounded-full py-2 w-full mb-2"></div>
            <div class="col-span-2 bg-slate-400 rounded-full py-2 w-2/3 mb-2"></div>
            <div class="col-span-2 bg-slate-400 rounded-full py-2 w-2/3 mb-2"></div>
            </div>
            </p>
            <button class="btn-primary mt-5 p-5 w-28 h-12"></button>
            </div>
            </div>
            </div> *@
            </div>
        }
        else
        {
            <div class="grid md:grid-cols-12 w-full h-[90vh] gap-2">
                <div class="md:col-span-5 lg:col-span-4 space-y-4 h-{50vh] overflow-auto">
                    @foreach (var job in jobs)
                    {
                        <div class=" flex flex-col  border-2 border-dark rounded-md shadow-lg p-4 bg-secondary-bg cursor-pointer"
                            @onclick="() => MenuOpenClose(job.JobId)">
                            <div class="flex flex-row justify-between">
                                <div class="flex flex-col">
                                    <h2 class="font-grotesk font-bold md:text-xl ">@job.JobTitle</h2>
                                    <h3 class="font-sourceSans font-medium md:text-lg">@job.EmployerName</h3>
                                    <h4 class="font-sourceSans">@(job.JobCity ?? null) @(job.JobState ?? null) @job.JobCountry
                                    </h4>
                                    <div class="flex flex-row space-x-1">
                                        <div class="text-xs font-bold bg-primary border-2 border-dark rounded-xl p-[.2rem]">
                                            @(job.JobMinSalary ?? "Undisclosed") - @(job.JobMaxSalary ??
                                    null)@(job.JobSalaryCurrency ?? null)
                                        </div>
                                        <div
                                            class="text-xs font-bold bg-primary border-2 border-dark rounded-xl p-[.2rem] text-transform capitalize">
                                            @job.JobEmploymentType
                                        </div>
                                    </div>
                                    <p class="font-sourceSans italic line-clamp-2 mt-4">@job.JobDescription</p>
                                    <p class="font-sourceSans font-bold mt-4">@job.JobPostedAtDateTime</p>
                                </div>
                                <div>
                                    <span class="icon-[ph--dots-three-circle-vertical-fill] bg-primary p-4"></span>
                                </div>
                            </div>
                        </div>
                    }

                </div>
                <div class="md:col-span-7 lg:col-span-8">
                    <div class=" space-y-4 @Menu">
                        <div class=" flex flex-col  border-2 border-dark rounded-md shadow-lg p-4 bg-secondary-bg">
                            <div class="flex flex-row justify-between">
                                <div class="flex flex-col">
                                    <h2 class="font-grotesk font-bold md:text-2xl ">@selectedJob?.JobTitle</h2>
                                    <h3 class="font-sourceSans font-medium md:text-xl">@selectedJob?.EmployerName</h3>
                                    <h4 class="font-sourceSans text-lg">@(selectedJob?.JobCity ?? null)
                                        @(selectedJob?.JobState ?? null)
                                        @selectedJob?.JobCountry</h4>
                                    <p class="font-sourceSans text-xl"> <span
                                            class="font-bold">@(selectedJob?.JobSalaryCurrency ??
                                        null)@(selectedJob?.JobMinSalary ?? "Undisclosed") -
                                            @(selectedJob?.JobSalaryCurrency ?? null)@(selectedJob?.JobMaxSalary ??
                                        null)</span> :
                                        @selectedJob?.JobEmploymentType, @(selectedJob.JobIsRemote ? "Remote" :
                                    "In-person")</p>
                                    <a href="@selectedJob?.JobApplyLink" target="_blank"><button
                                            class="btn-primary w-[9rem] flex justify-center items-center space-x-2">Apply
                                            Now <span class="icon-[akar-icons--link-out]"></span></button></a>
                                </div>
                                <div>
                                    <span
                                        class="icon-[ph--dots-three-circle-vertical-fill] bg-primary p-4 cursor-pointer"></span>
                                </div>
                            </div>
                        </div>
                        <div class="p-4 border-2 border-dark rounded-md shadow-lg bg-secondary-bg">
                            <h2 class="font-grotesk font-bold text-lg md:text-xl lg:text-2xl mb-4">Job Details</h2>
                            <p class="body-text1">@selectedJob?.JobDescription</p>
                            <button class="btn-primary mt-5">Report Job</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <Pagination CurrentPage="currentPage" TotalPages="totalPages" OnPageChanged="HandlePageChanged" NameOfClass="w-full justify-between mt-6 md:w-[40vw] lg:w-[25vw]"/>

        <Popup @bind-IsVisible="isPopupVisible">
            <div class=" w-full h-auto overflow-auto">
                <div class=" space-y-4">
                    <div class=" flex flex-col  border-2 border-dark rounded-md shadow-lg p-4 bg-secondary-bg">
                        <div class="flex flex-row justify-between">
                            <div class="flex flex-col">
                                <h2 class="font-grotesk font-bold md:text-2xl ">@selectedJob?.JobTitle</h2>
                                <h3 class="font-sourceSans font-medium md:text-xl">@selectedJob?.EmployerName</h3>
                                <h4 class="font-sourceSans text-lg">@(selectedJob?.JobCity ?? null)
                                    @(selectedJob?.JobState ?? null)
                                    @selectedJob?.JobCountry</h4>
                                <p class="font-sourceSans text-xl"><span
                                        class="font-bold">@(selectedJob?.JobSalaryCurrency ??
                                        null)@(selectedJob?.JobMinSalary ?? "Undisclosed") -
                                        @(selectedJob?.JobSalaryCurrency ?? null)@(selectedJob?.JobMaxSalary ??
                                        null)</span> :
                                    @selectedJob?.JobEmploymentType, @(selectedJob.JobIsRemote ? "Remote" :
                                    "In-person")</p>
                                <a href="@selectedJob?.JobApplyLink" target="_blank"><button
                                        class="btn-primary w-[9rem] flex justify-center items-center space-x-2">Apply
                                        Now <span class="icon-[akar-icons--link-out]"></span></button></a>
                            </div>
                        </div>
                    </div>
                    <div class="p-4 border-2 border-dark rounded-md shadow-lg bg-secondary-bg">
                        <h2 class="font-grotesk font-bold text-lg md:text-xl lg:text-2xl mb-4">Job Details</h2>
                        <p class="body-text1 line">@selectedJob?.JobDescription</p>
                        <button class="btn-primary mt-5">Report Job</button>
                    </div>
                </div>
            </div>
        </Popup>
    </div>

</div>

@code {
    private string selectedDatePosted = "";
    private string selectedExperienceLevel = "";
    private string selectedJobType = "";

    private bool showDPDropdown = false;
    private bool showELDropdown = false;
    private bool showJTDropdown = false;
    private string dropdownDatePostedClass => showDPDropdown ? "" : "hidden";
    private string dropdownExperienceLevelClass => showELDropdown ? "" : "hidden";
    private string dropdownJobTypeClass => showJTDropdown ? "" : "hidden";
    private void ToggleDPDropdown()
    {
        showDPDropdown = !showDPDropdown;        
    }
    private void ToggleELDropdown()
    {
        showELDropdown = !showELDropdown;
    }
    private void ToggleJTDropdown()
    {
        showJTDropdown = !showJTDropdown;
    }
    private async void SelectDatePosted(string datePosted)
    {
        selectedDatePosted = datePosted;
        await LoadJobs(datePosted: selectedDatePosted);
    }

    private async void SelectExperienceLevel(string experienceLevel)
    {
        selectedExperienceLevel = experienceLevel;
        await LoadJobs(experienceLevel: selectedExperienceLevel);
    }
    
    private async void SelectJobType(string jobType)
    {
        selectedJobType = jobType;
        await LoadJobs(jobType: selectedJobType);
    }



    private string selectedJobId = "";
    private bool collapseMenu = true;

    private string? Menu => collapseMenu ? "hidden" : "max-sm:hidden";

    private void ToggleMenu()
    {
        collapseMenu = !collapseMenu;
    }

    private bool isPopupVisible = false;

    private void OpenPopup()
    {
        isPopupVisible = true;
    }

    private void MenuOpenClose(string? jobId)
    {
        ToggleMenu();
        OpenPopup();
        selectedJobId = jobId ?? "";
        selectedJob = jobs.FirstOrDefault(j => j.JobId == selectedJobId);
    }


    private IEnumerable<JobSearchRespModel>? jobs;
    private int currentPage = 1;
    private int? totalPages;

    private JobSearchReqDto jobSearchParam = new JobSearchReqDto()
    {
        query = "Dotnet Developer",
        country = "Nigeria"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadJobs();
    }

    private async Task LoadJobs(int page = 1, string datePosted = "", string experienceLevel = "", string jobType = "")
    {
        string? baseUrl = _config.GetValue<string>("ProjectBaseSettings:BaseUrl");
        string? jobEndpoint = _config.GetValue<string>("ProjectBaseSettings:JobPostingEndpoint");

        jobEndpoint = string.Format(jobEndpoint ?? "", jobSearchParam.query);    
        jobEndpoint = jobEndpoint + $" in {jobSearchParam.country}";
        jobEndpoint = jobEndpoint + $"&page={page}";

        var filters = new List<string>();
        if (!string.IsNullOrEmpty(datePosted)) filters.Add($"date_posted={Uri.EscapeDataString(datePosted).ToLower()}");
        if (!string.IsNullOrEmpty(experienceLevel)) filters.Add($"job_requirements={Uri.EscapeDataString(experienceLevel)}");
        if (!string.IsNullOrEmpty(jobType)) filters.Add($"employment_types={Uri.EscapeDataString(jobType).ToUpper()}");

        if (filters.Any())
        {
            jobEndpoint += $"&{string.Join("&", filters)}";
        }

        string fullUrl = $"{baseUrl}{jobEndpoint}";

        var request = new HttpRequestMessage(HttpMethod.Get, fullUrl);
        request.Headers.Add("Accept", "application/json");

        var res = await Http.SendAsync(request);

        if (res.IsSuccessStatusCode)
        {
            var response = await res.Content.ReadAsStringAsync();
            var jobData = JsonConvert.DeserializeObject<ApiResponseModel<PaginationResult<JobSearchRespModel>>>(response);
            // Assuming each page returns a fixed number of jobs, e.g., 10
            int pageSize = 10;
            // Calculate the start index for this page
            int startIndex = (page - 1) * pageSize;

            // Filter jobs for this page
            var paginatedJobs = jobData?.data?.records.Skip(startIndex).Take(pageSize).ToList();

            // Update the jobs variable with the filtered list
            jobs = paginatedJobs;
            totalPages = jobData?.data?.totalPages;
        }
    }

    private async Task HandlePageChanged(int page)
    {
        currentPage = page;
        await LoadJobs(currentPage);
    }

    private JobSearchRespModel selectedJob = new JobSearchRespModel()
    {
        EmployerCompanyType = "",
        EmployerLogo = "",
        EmployerName = "",
        EmployerWebsite = "",
        JobId = "",
        JobBenefits = new List<string>() { },
        JobDescription = "",
        JobApplyLink = "",
        JobCity = "",
        JobCountry = "",
        JobIsRemote = true,
        JobMaxSalary = "",
        JobOfferExpirationDatetimeUtc = DateTime.UtcNow,
        JobEmploymentType = "",
        JobMinSalary = "",
        JobOfferExpirationTimestamp = 123556,
        JobPostedAtDateTime = DateTime.UtcNow,
        JobPostedAtTimestamp = 1234567,
        JobSalaryCurrency = "",
        JobState = "",
        JobTitle = ""
    };
}
